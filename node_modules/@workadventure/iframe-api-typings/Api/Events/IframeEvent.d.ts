import { z } from "zod";
export interface TypedMessageEvent<T> extends MessageEvent {
    data: T;
}
/**
 * List event types sent from an iFrame to WorkAdventure
 */
export declare const isIframeEventWrapper: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"addActionsMenuKeyToRemotePlayer">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        actionKey: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        actionKey: string;
    }, {
        id: number;
        actionKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "addActionsMenuKeyToRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}, {
    type: "addActionsMenuKeyToRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"removeActionsMenuKeyFromRemotePlayer">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        actionKey: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        actionKey: string;
    }, {
        id: number;
        actionKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "removeActionsMenuKeyFromRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}, {
    type: "removeActionsMenuKeyFromRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"loadPage">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "loadPage";
    data: {
        url: string;
    };
}, {
    type: "loadPage";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"chat">;
    data: z.ZodObject<{
        message: z.ZodString;
        author: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        author: string;
    }, {
        message: string;
        author: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "chat";
    data: {
        message: string;
        author: string;
    };
}, {
    type: "chat";
    data: {
        message: string;
        author: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"cameraFollowPlayer">;
    data: z.ZodObject<{
        smooth: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        smooth: boolean;
    }, {
        smooth: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "cameraFollowPlayer";
    data: {
        smooth: boolean;
    };
}, {
    type: "cameraFollowPlayer";
    data: {
        smooth: boolean;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"cameraSet">;
    data: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
        lock: z.ZodBoolean;
        smooth: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        width?: number | undefined;
        height?: number | undefined;
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
    }, {
        width?: number | undefined;
        height?: number | undefined;
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "cameraSet";
    data: {
        width?: number | undefined;
        height?: number | undefined;
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
    };
}, {
    type: "cameraSet";
    data: {
        width?: number | undefined;
        height?: number | undefined;
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openPopup">;
    data: z.ZodObject<{
        popupId: z.ZodNumber;
        targetObject: z.ZodString;
        message: z.ZodString;
        buttons: z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            className: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            className?: string | undefined;
            label: string;
        }, {
            className?: string | undefined;
            label: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            className?: string | undefined;
            label: string;
        }[];
    }, {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            className?: string | undefined;
            label: string;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openPopup";
    data: {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            className?: string | undefined;
            label: string;
        }[];
    };
}, {
    type: "openPopup";
    data: {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            className?: string | undefined;
            label: string;
        }[];
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"closePopup">;
    data: z.ZodObject<{
        popupId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        popupId: number;
    }, {
        popupId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "closePopup";
    data: {
        popupId: number;
    };
}, {
    type: "closePopup";
    data: {
        popupId: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openTab">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openTab";
    data: {
        url: string;
    };
}, {
    type: "openTab";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"goToPage">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "goToPage";
    data: {
        url: string;
    };
}, {
    type: "goToPage";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"disablePlayerControls">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "disablePlayerControls";
}, {
    data?: undefined;
    type: "disablePlayerControls";
}>, z.ZodObject<{
    type: z.ZodLiteral<"restorePlayerControls">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "restorePlayerControls";
}, {
    data?: undefined;
    type: "restorePlayerControls";
}>, z.ZodObject<{
    type: z.ZodLiteral<"disablePlayerProximityMeeting">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "disablePlayerProximityMeeting";
}, {
    data?: undefined;
    type: "disablePlayerProximityMeeting";
}>, z.ZodObject<{
    type: z.ZodLiteral<"restorePlayerProximityMeeting">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "restorePlayerProximityMeeting";
}, {
    data?: undefined;
    type: "restorePlayerProximityMeeting";
}>, z.ZodObject<{
    type: z.ZodLiteral<"displayBubble">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "displayBubble";
}, {
    data?: undefined;
    type: "displayBubble";
}>, z.ZodObject<{
    type: z.ZodLiteral<"removeBubble">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "removeBubble";
}, {
    data?: undefined;
    type: "removeBubble";
}>, z.ZodObject<{
    type: z.ZodLiteral<"onPlayerMove">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "onPlayerMove";
}, {
    data?: undefined;
    type: "onPlayerMove";
}>, z.ZodObject<{
    type: z.ZodLiteral<"onCameraUpdate">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    data?: undefined;
    type: "onCameraUpdate";
}, {
    data?: undefined;
    type: "onCameraUpdate";
}>, z.ZodObject<{
    type: z.ZodLiteral<"showLayer">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "showLayer";
    data: {
        name: string;
    };
}, {
    type: "showLayer";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"hideLayer">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "hideLayer";
    data: {
        name: string;
    };
}, {
    type: "hideLayer";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setProperty">;
    data: z.ZodObject<{
        layerName: z.ZodString;
        propertyName: z.ZodString;
        propertyValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    }, "strip", z.ZodTypeAny, {
        propertyValue?: string | number | boolean | undefined;
        layerName: string;
        propertyName: string;
    }, {
        propertyValue?: string | number | boolean | undefined;
        layerName: string;
        propertyName: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setProperty";
    data: {
        propertyValue?: string | number | boolean | undefined;
        layerName: string;
        propertyName: string;
    };
}, {
    type: "setProperty";
    data: {
        propertyValue?: string | number | boolean | undefined;
        layerName: string;
        propertyName: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setAreaProperty">;
    data: z.ZodObject<{
        areaName: z.ZodString;
        propertyName: z.ZodString;
        propertyValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    }, "strip", z.ZodTypeAny, {
        propertyValue?: string | number | boolean | undefined;
        propertyName: string;
        areaName: string;
    }, {
        propertyValue?: string | number | boolean | undefined;
        propertyName: string;
        areaName: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setAreaProperty";
    data: {
        propertyValue?: string | number | boolean | undefined;
        propertyName: string;
        areaName: string;
    };
}, {
    type: "setAreaProperty";
    data: {
        propertyValue?: string | number | boolean | undefined;
        propertyName: string;
        areaName: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"loadSound">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "loadSound";
    data: {
        url: string;
    };
}, {
    type: "loadSound";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"playSound">;
    data: z.ZodObject<{
        url: z.ZodString;
        config: z.ZodOptional<z.ZodObject<{
            volume: z.ZodOptional<z.ZodNumber>;
            loop: z.ZodOptional<z.ZodBoolean>;
            mute: z.ZodOptional<z.ZodBoolean>;
            rate: z.ZodOptional<z.ZodNumber>;
            detune: z.ZodOptional<z.ZodNumber>;
            seek: z.ZodOptional<z.ZodNumber>;
            delay: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        }, {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
        url: string;
    }, {
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "playSound";
    data: {
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
        url: string;
    };
}, {
    type: "playSound";
    data: {
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"stopSound">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "stopSound";
    data: {
        url: string;
    };
}, {
    type: "stopSound";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"registerMenu">;
    data: z.ZodObject<{
        name: z.ZodString;
        iframe: z.ZodOptional<z.ZodString>;
        options: z.ZodObject<{
            allowApi: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            allowApi: boolean;
        }, {
            allowApi: boolean;
        }>;
    }, "strip", z.ZodTypeAny, {
        iframe?: string | undefined;
        options: {
            allowApi: boolean;
        };
        name: string;
    }, {
        iframe?: string | undefined;
        options: {
            allowApi: boolean;
        };
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "registerMenu";
    data: {
        iframe?: string | undefined;
        options: {
            allowApi: boolean;
        };
        name: string;
    };
}, {
    type: "registerMenu";
    data: {
        iframe?: string | undefined;
        options: {
            allowApi: boolean;
        };
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"unregisterMenu">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "unregisterMenu";
    data: {
        name: string;
    };
}, {
    type: "unregisterMenu";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setTiles">;
    data: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        tile: z.ZodUnion<[z.ZodNumber, z.ZodString, z.ZodNull]>;
        layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }, {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "setTiles";
    data: {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }[];
}, {
    type: "setTiles";
    data: {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"modifyEmbeddedWebsite">;
    data: z.ZodObject<{
        name: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        visible: z.ZodOptional<z.ZodBoolean>;
        allowApi: z.ZodOptional<z.ZodBoolean>;
        allow: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
        origin: z.ZodOptional<z.ZodEnum<["player", "map"]>>;
        scale: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "player" | "map" | undefined;
        scale?: number | undefined;
        name: string;
    }, {
        url?: string | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "player" | "map" | undefined;
        scale?: number | undefined;
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modifyEmbeddedWebsite";
    data: {
        url?: string | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "player" | "map" | undefined;
        scale?: number | undefined;
        name: string;
    };
}, {
    type: "modifyEmbeddedWebsite";
    data: {
        url?: string | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "player" | "map" | undefined;
        scale?: number | undefined;
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"modifyUIWebsite">;
    data: z.ZodObject<{
        id: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        visible: z.ZodOptional<z.ZodBoolean>;
        position: z.ZodOptional<z.ZodObject<{
            vertical: z.ZodEnum<["top", "middle", "bottom"]>;
            horizontal: z.ZodEnum<["left", "middle", "right"]>;
        }, "strip", z.ZodTypeAny, {
            vertical: "top" | "middle" | "bottom";
            horizontal: "middle" | "left" | "right";
        }, {
            vertical: "top" | "middle" | "bottom";
            horizontal: "middle" | "left" | "right";
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            height: z.ZodString;
            width: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            width: string;
            height: string;
        }, {
            width: string;
            height: string;
        }>>;
        margin: z.ZodOptional<z.ZodObject<{
            top: z.ZodOptional<z.ZodString>;
            bottom: z.ZodOptional<z.ZodString>;
            left: z.ZodOptional<z.ZodString>;
            right: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            top?: string | undefined;
            bottom?: string | undefined;
            left?: string | undefined;
            right?: string | undefined;
        }, {
            top?: string | undefined;
            bottom?: string | undefined;
            left?: string | undefined;
            right?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        position?: {
            vertical: "top" | "middle" | "bottom";
            horizontal: "middle" | "left" | "right";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            width: string;
            height: string;
        } | undefined;
        margin?: {
            top?: string | undefined;
            bottom?: string | undefined;
            left?: string | undefined;
            right?: string | undefined;
        } | undefined;
        id: string;
    }, {
        url?: string | undefined;
        position?: {
            vertical: "top" | "middle" | "bottom";
            horizontal: "middle" | "left" | "right";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            width: string;
            height: string;
        } | undefined;
        margin?: {
            top?: string | undefined;
            bottom?: string | undefined;
            left?: string | undefined;
            right?: string | undefined;
        } | undefined;
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modifyUIWebsite";
    data: {
        url?: string | undefined;
        position?: {
            vertical: "top" | "middle" | "bottom";
            horizontal: "middle" | "left" | "right";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            width: string;
            height: string;
        } | undefined;
        margin?: {
            top?: string | undefined;
            bottom?: string | undefined;
            left?: string | undefined;
            right?: string | undefined;
        } | undefined;
        id: string;
    };
}, {
    type: "modifyUIWebsite";
    data: {
        url?: string | undefined;
        position?: {
            vertical: "top" | "middle" | "bottom";
            horizontal: "middle" | "left" | "right";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            width: string;
            height: string;
        } | undefined;
        margin?: {
            top?: string | undefined;
            bottom?: string | undefined;
            left?: string | undefined;
            right?: string | undefined;
        } | undefined;
        id: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"modifyArea">;
    data: z.ZodObject<{
        name: z.ZodString;
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        name: string;
    }, {
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modifyArea";
    data: {
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        name: string;
    };
}, {
    type: "modifyArea";
    data: {
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        name: string;
    };
}>]>;
export declare type IframeEvent = z.infer<typeof isIframeEventWrapper>;
export declare const isIframeResponseEvent: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"userInputChat">;
    data: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "userInputChat";
    data: {
        message: string;
    };
}, {
    type: "userInputChat";
    data: {
        message: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterEvent";
    data: {
        name: string;
    };
}, {
    type: "enterEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterLayerEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterLayerEvent";
    data: {
        name: string;
    };
}, {
    type: "enterLayerEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveLayerEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveLayerEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveLayerEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterAreaEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterAreaEvent";
    data: {
        name: string;
    };
}, {
    type: "enterAreaEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveAreaEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveAreaEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveAreaEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"buttonClickedEvent">;
    data: z.ZodObject<{
        popupId: z.ZodNumber;
        buttonId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        popupId: number;
        buttonId: number;
    }, {
        popupId: number;
        buttonId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "buttonClickedEvent";
    data: {
        popupId: number;
        buttonId: number;
    };
}, {
    type: "buttonClickedEvent";
    data: {
        popupId: number;
        buttonId: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"remotePlayerClickedEvent">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        uuid: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        name: string;
        uuid: string;
    }, {
        id: number;
        name: string;
        uuid: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "remotePlayerClickedEvent";
    data: {
        id: number;
        name: string;
        uuid: string;
    };
}, {
    type: "remotePlayerClickedEvent";
    data: {
        id: number;
        name: string;
        uuid: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"actionsMenuActionClickedEvent">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        actionName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        actionName: string;
    }, {
        id: number;
        actionName: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "actionsMenuActionClickedEvent";
    data: {
        id: number;
        actionName: string;
    };
}, {
    type: "actionsMenuActionClickedEvent";
    data: {
        id: number;
        actionName: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"hasPlayerMoved">;
    data: z.ZodObject<{
        direction: z.ZodEnum<["right", "left", "up", "down"]>;
        moving: z.ZodBoolean;
        x: z.ZodNumber;
        y: z.ZodNumber;
        oldX: z.ZodOptional<z.ZodNumber>;
        oldY: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        oldX?: number | undefined;
        oldY?: number | undefined;
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
    }, {
        oldX?: number | undefined;
        oldY?: number | undefined;
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "hasPlayerMoved";
    data: {
        oldX?: number | undefined;
        oldY?: number | undefined;
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
    };
}, {
    type: "hasPlayerMoved";
    data: {
        oldX?: number | undefined;
        oldY?: number | undefined;
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"wasCameraUpdated">;
    data: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        zoom: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        height: number;
        zoom: number;
    }, {
        x: number;
        y: number;
        width: number;
        height: number;
        zoom: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "wasCameraUpdated";
    data: {
        x: number;
        y: number;
        width: number;
        height: number;
        zoom: number;
    };
}, {
    type: "wasCameraUpdated";
    data: {
        x: number;
        y: number;
        width: number;
        height: number;
        zoom: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"menuItemClicked">;
    data: z.ZodObject<{
        menuItem: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        menuItem: string;
    }, {
        menuItem: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "menuItemClicked";
    data: {
        menuItem: string;
    };
}, {
    type: "menuItemClicked";
    data: {
        menuItem: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setVariable">;
    data: z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnknown;
        target: z.ZodEnum<["global", "player"]>;
    }, "strip", z.ZodTypeAny, {
        value?: unknown;
        key: string;
        target: "global" | "player";
    }, {
        value?: unknown;
        key: string;
        target: "global" | "player";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setVariable";
    data: {
        value?: unknown;
        key: string;
        target: "global" | "player";
    };
}, {
    type: "setVariable";
    data: {
        value?: unknown;
        key: string;
        target: "global" | "player";
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"messageTriggered">;
    data: z.ZodObject<{
        uuid: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        uuid: string;
    }, {
        uuid: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "messageTriggered";
    data: {
        uuid: string;
    };
}, {
    type: "messageTriggered";
    data: {
        uuid: string;
    };
}>]>;
export declare type IframeResponseEvent = z.infer<typeof isIframeResponseEvent>;
export declare const isLookingLikeIframeEventWrapper: z.ZodObject<{
    type: z.ZodString;
    data: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    data?: unknown;
    type: string;
}, {
    data?: unknown;
    type: string;
}>;
/**
 * List event types sent from an iFrame to WorkAdventure that expect a unique answer from WorkAdventure along the type for the answer from WorkAdventure to the iFrame.
 * Types are defined using Type guards that will actually bused to enforce and check types.
 */
export declare const iframeQueryMapTypeGuards: {
    getState: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            roomId: z.ZodString;
            mapUrl: z.ZodString;
            nickname: z.ZodString;
            language: z.ZodOptional<z.ZodString>;
            uuid: z.ZodOptional<z.ZodString>;
            startLayerName: z.ZodOptional<z.ZodString>;
            tags: z.ZodArray<z.ZodString, "many">;
            variables: z.ZodUnknown;
            playerVariables: z.ZodUnknown;
            userRoomToken: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            language?: string | undefined;
            uuid?: string | undefined;
            startLayerName?: string | undefined;
            variables?: unknown;
            playerVariables?: unknown;
            userRoomToken?: string | undefined;
            roomId: string;
            mapUrl: string;
            nickname: string;
            tags: string[];
        }, {
            language?: string | undefined;
            uuid?: string | undefined;
            startLayerName?: string | undefined;
            variables?: unknown;
            playerVariables?: unknown;
            userRoomToken?: string | undefined;
            roomId: string;
            mapUrl: string;
            nickname: string;
            tags: string[];
        }>;
    };
    getMapData: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            data: z.ZodUnknown;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
        }, {
            data?: unknown;
        }>;
    };
    setVariable: {
        query: z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnknown;
            target: z.ZodEnum<["global", "player"]>;
        }, "strip", z.ZodTypeAny, {
            value?: unknown;
            key: string;
            target: "global" | "player";
        }, {
            value?: unknown;
            key: string;
            target: "global" | "player";
        }>;
        answer: z.ZodUndefined;
    };
    loadTileset: {
        query: z.ZodObject<{
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
        }, {
            url: string;
        }>;
        answer: z.ZodNumber;
    };
    openCoWebsite: {
        query: z.ZodObject<{
            url: z.ZodString;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allowPolicy: z.ZodOptional<z.ZodString>;
            widthPercent: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodNumber>;
            closable: z.ZodOptional<z.ZodBoolean>;
            lazy: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            widthPercent?: number | undefined;
            position?: number | undefined;
            closable?: boolean | undefined;
            lazy?: boolean | undefined;
            url: string;
        }, {
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            widthPercent?: number | undefined;
            position?: number | undefined;
            closable?: boolean | undefined;
            lazy?: boolean | undefined;
            url: string;
        }>;
        answer: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    };
    getCoWebsites: {
        query: z.ZodUndefined;
        answer: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>, "many">;
    };
    closeCoWebsite: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    closeCoWebsites: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    triggerActionMessage: {
        query: z.ZodObject<{
            message: z.ZodString;
            uuid: z.ZodString;
            type: z.ZodEnum<["message", "warning"]>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "message" | "warning";
            uuid: string;
        }, {
            message: string;
            type: "message" | "warning";
            uuid: string;
        }>;
        answer: z.ZodUndefined;
    };
    removeActionMessage: {
        query: z.ZodObject<{
            uuid: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            uuid: string;
        }, {
            uuid: string;
        }>;
        answer: z.ZodUndefined;
    };
    getEmbeddedWebsite: {
        query: z.ZodString;
        answer: z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                width: z.ZodNumber;
                height: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                width: number;
                height: number;
            }, {
                x: number;
                y: number;
                width: number;
                height: number;
            }>;
            visible: z.ZodOptional<z.ZodBoolean>;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allow: z.ZodOptional<z.ZodString>;
            origin: z.ZodOptional<z.ZodEnum<["player", "map"]>>;
            scale: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "player" | "map" | undefined;
            scale?: number | undefined;
            url: string;
            position: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            name: string;
        }, {
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "player" | "map" | undefined;
            scale?: number | undefined;
            url: string;
            position: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            name: string;
        }>;
    };
    deleteEmbeddedWebsite: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    createEmbeddedWebsite: {
        query: z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                width: z.ZodNumber;
                height: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                width: number;
                height: number;
            }, {
                x: number;
                y: number;
                width: number;
                height: number;
            }>;
            visible: z.ZodOptional<z.ZodBoolean>;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allow: z.ZodOptional<z.ZodString>;
            origin: z.ZodOptional<z.ZodEnum<["player", "map"]>>;
            scale: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "player" | "map" | undefined;
            scale?: number | undefined;
            url: string;
            position: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            name: string;
        }, {
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "player" | "map" | undefined;
            scale?: number | undefined;
            url: string;
            position: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            name: string;
        }>;
        answer: z.ZodUndefined;
    };
    createArea: {
        query: z.ZodObject<{
            name: z.ZodString;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            x: number;
            y: number;
            width: number;
            height: number;
        }, {
            name: string;
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        answer: z.ZodUndefined;
    };
    getArea: {
        query: z.ZodString;
        answer: z.ZodObject<{
            name: z.ZodString;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            x: number;
            y: number;
            width: number;
            height: number;
        }, {
            name: string;
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
    };
    modifyArea: {
        query: z.ZodObject<{
            name: z.ZodString;
            x: z.ZodOptional<z.ZodNumber>;
            y: z.ZodOptional<z.ZodNumber>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            x?: number | undefined;
            y?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            name: string;
        }, {
            x?: number | undefined;
            y?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            name: string;
        }>;
        answer: z.ZodUndefined;
    };
    deleteArea: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    setPlayerOutline: {
        query: z.ZodObject<{
            red: z.ZodNumber;
            green: z.ZodNumber;
            blue: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            red: number;
            green: number;
            blue: number;
        }, {
            red: number;
            green: number;
            blue: number;
        }>;
        answer: z.ZodUndefined;
    };
    removePlayerOutline: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    getPlayerPosition: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
    };
    movePlayerTo: {
        query: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            speed: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            speed?: number | undefined;
            x: number;
            y: number;
        }, {
            speed?: number | undefined;
            x: number;
            y: number;
        }>;
        answer: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            cancelled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            cancelled: boolean;
        }, {
            x: number;
            y: number;
            cancelled: boolean;
        }>;
    };
    openUIWebsite: {
        query: z.ZodObject<{
            url: z.ZodString;
            visible: z.ZodOptional<z.ZodBoolean>;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allowPolicy: z.ZodOptional<z.ZodString>;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            }, {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                width: string;
                height: string;
            }, {
                width: string;
                height: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodString>;
                bottom: z.ZodOptional<z.ZodString>;
                left: z.ZodOptional<z.ZodString>;
                right: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            }, {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            visible?: boolean | undefined;
            margin?: {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            } | undefined;
            url: string;
            position: {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            };
            size: {
                width: string;
                height: string;
            };
        }, {
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            visible?: boolean | undefined;
            margin?: {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            } | undefined;
            url: string;
            position: {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            };
            size: {
                width: string;
                height: string;
            };
        }>;
        answer: z.ZodObject<{
            id: z.ZodString;
            url: z.ZodString;
            visible: z.ZodBoolean;
            allowApi: z.ZodBoolean;
            allowPolicy: z.ZodString;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            }, {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                width: string;
                height: string;
            }, {
                width: string;
                height: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodString>;
                bottom: z.ZodOptional<z.ZodString>;
                left: z.ZodOptional<z.ZodString>;
                right: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            }, {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            margin?: {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            } | undefined;
            url: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            };
            id: string;
            visible: boolean;
            size: {
                width: string;
                height: string;
            };
        }, {
            margin?: {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            } | undefined;
            url: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            };
            id: string;
            visible: boolean;
            size: {
                width: string;
                height: string;
            };
        }>;
    };
    closeUIWebsite: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    getUIWebsites: {
        query: z.ZodUndefined;
        answer: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            url: z.ZodString;
            visible: z.ZodBoolean;
            allowApi: z.ZodBoolean;
            allowPolicy: z.ZodString;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            }, {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                width: string;
                height: string;
            }, {
                width: string;
                height: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodString>;
                bottom: z.ZodOptional<z.ZodString>;
                left: z.ZodOptional<z.ZodString>;
                right: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            }, {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            margin?: {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            } | undefined;
            url: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            };
            id: string;
            visible: boolean;
            size: {
                width: string;
                height: string;
            };
        }, {
            margin?: {
                top?: string | undefined;
                bottom?: string | undefined;
                left?: string | undefined;
                right?: string | undefined;
            } | undefined;
            url: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "middle" | "bottom";
                horizontal: "middle" | "left" | "right";
            };
            id: string;
            visible: boolean;
            size: {
                width: string;
                height: string;
            };
        }>, "many">;
    };
};
declare type IframeQueryMapTypeGuardsType = typeof iframeQueryMapTypeGuards;
declare type UnknownToVoid<T> = undefined extends T ? void : T;
export declare type IframeQueryMap = {
    [key in keyof IframeQueryMapTypeGuardsType]: {
        query: z.infer<typeof iframeQueryMapTypeGuards[key]["query"]>;
        answer: UnknownToVoid<z.infer<typeof iframeQueryMapTypeGuards[key]["answer"]>>;
    };
};
export interface IframeQuery<T extends keyof IframeQueryMap> {
    type: T;
    data: IframeQueryMap[T]["query"];
}
export interface IframeQueryWrapper<T extends keyof IframeQueryMap> {
    id: number;
    query: IframeQuery<T>;
}
export declare const isIframeQueryKey: (type: string) => type is "setVariable" | "triggerActionMessage" | "removeActionMessage" | "modifyArea" | "getState" | "getMapData" | "loadTileset" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "createArea" | "getArea" | "deleteArea" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo" | "openUIWebsite" | "closeUIWebsite" | "getUIWebsites";
export declare const isIframeQuery: (event: any) => event is IframeQuery<"setVariable" | "triggerActionMessage" | "removeActionMessage" | "modifyArea" | "getState" | "getMapData" | "loadTileset" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "createArea" | "getArea" | "deleteArea" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo" | "openUIWebsite" | "closeUIWebsite" | "getUIWebsites">;
export declare const isIframeQueryWrapper: (event: any) => event is IframeQueryWrapper<"setVariable" | "triggerActionMessage" | "removeActionMessage" | "modifyArea" | "getState" | "getMapData" | "loadTileset" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "createArea" | "getArea" | "deleteArea" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo" | "openUIWebsite" | "closeUIWebsite" | "getUIWebsites">;
export interface IframeAnswerEvent<T extends keyof IframeQueryMap> {
    id: number;
    type: T;
    data: IframeQueryMap[T]["answer"];
}
export declare const isIframeAnswerEvent: (event: any) => event is IframeAnswerEvent<"setVariable" | "triggerActionMessage" | "removeActionMessage" | "modifyArea" | "getState" | "getMapData" | "loadTileset" | "openCoWebsite" | "getCoWebsites" | "closeCoWebsite" | "closeCoWebsites" | "getEmbeddedWebsite" | "deleteEmbeddedWebsite" | "createEmbeddedWebsite" | "createArea" | "getArea" | "deleteArea" | "setPlayerOutline" | "removePlayerOutline" | "getPlayerPosition" | "movePlayerTo" | "openUIWebsite" | "closeUIWebsite" | "getUIWebsites">;
export declare const isIframeErrorAnswerEvent: z.ZodObject<{
    id: z.ZodNumber;
    type: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    id: number;
}, {
    type: string;
    error: string;
    id: number;
}>;
/**
 * A message sent from the game to the iFrame when a user enters or leaves a zone.
 */
export declare type IframeErrorAnswerEvent = z.infer<typeof isIframeErrorAnswerEvent>;
export {};
