import { IframeApiContribution } from "./IframeApiContribution";
import type { ButtonDescriptor } from "./Ui/ButtonDescriptor";
import { Popup } from "./Ui/Popup";
import { ActionMessage } from "./Ui/ActionMessage";
import { Menu } from "./Ui/Menu";
import type { RequireOnlyOne } from "../types";
import { RemotePlayerClickedEvent } from "../Events/RemotePlayerClickedEvent";
import { Observable, Subject } from "rxjs";
import type { UIWebsiteCommands } from "./Ui/UIWebsite";
interface MenuDescriptor {
    callback?: (commandDescriptor: string) => void;
    iframe?: string;
    allowApi?: boolean;
}
export declare type MenuOptions = RequireOnlyOne<MenuDescriptor, "callback" | "iframe">;
export interface ActionMessageOptions {
    message: string;
    type?: "message" | "warning";
    callback: () => void;
}
export declare class RemotePlayer {
    readonly id: number;
    readonly uuid: string;
    readonly name: string;
    private actions;
    constructor(remotePlayer: RemotePlayerClickedEvent);
    addAction(key: string, callback: Function): ActionsMenuAction;
    callAction(key: string): void;
    removeAction(key: string): void;
}
export declare class ActionsMenuAction {
    private remotePlayer;
    private key;
    private callback;
    constructor(remotePlayer: RemotePlayer, key: string, callback: Function);
    call(): void;
    remove(): void;
}
export declare class WorkAdventureUiCommands extends IframeApiContribution<WorkAdventureUiCommands> {
    readonly _onRemotePlayerClicked: Subject<RemotePlayer>;
    readonly onRemotePlayerClicked: Observable<RemotePlayer>;
    private currentlyClickedRemotePlayer?;
    constructor();
    callbacks: ({
        type: "buttonClickedEvent";
        callback: (event: {
            popupId: number;
            buttonId: number;
        }) => void;
    } | {
        type: "menuItemClicked";
        callback: (event: {
            menuItem: string;
        }) => void;
    } | {
        type: "messageTriggered";
        callback: (event: {
            uuid: string;
        }) => void;
    } | {
        type: "remotePlayerClickedEvent";
        callback: (event: {
            id: number;
            name: string;
            uuid: string;
        }) => void;
    } | {
        type: "actionsMenuActionClickedEvent";
        callback: (event: {
            id: number;
            actionName: string;
        }) => void;
    })[];
    addActionsMenuKeyToRemotePlayer(id: number, actionKey: string): void;
    removeActionsMenuKeyFromRemotePlayer(id: number, actionKey: string): void;
    openPopup(targetObject: string, message: string, buttons: ButtonDescriptor[]): Popup;
    registerMenuCommand(commandDescriptor: string, options: MenuOptions | ((commandDescriptor: string) => void)): Menu;
    displayBubble(): void;
    removeBubble(): void;
    displayActionMessage(actionMessageOptions: ActionMessageOptions): ActionMessage;
    get website(): UIWebsiteCommands;
}
declare const _default: WorkAdventureUiCommands;
export default _default;
