import { Subject } from "rxjs";
import { IframeApiContribution } from "./IframeApiContribution";
import type { ITiledMap } from "../../Phaser/Map/ITiledMap";
import type { WorkadventureRoomWebsiteCommands } from "./website";
import { WorkadventureAreaCommands } from "./area";
interface TileDescriptor {
    x: number;
    y: number;
    tile: number | string | null;
    layer: string;
}
export declare const setRoomId: (id: string) => void;
export declare const setMapURL: (url: string) => void;
export declare class WorkadventureRoomCommands extends IframeApiContribution<WorkadventureRoomCommands> {
    callbacks: ({
        type: "enterEvent";
        callback: (event: {
            name: string;
        }) => void;
    } | {
        type: "leaveEvent";
        callback: (event: {
            name: string;
        }) => void;
    } | {
        type: "enterLayerEvent";
        callback: (event: {
            name: string;
        }) => void;
    } | {
        type: "leaveLayerEvent";
        callback: (event: {
            name: string;
        }) => void;
    })[];
    /**
     * @deprecated Use onEnterLayer instead
     */
    onEnterZone(name: string, callback: () => void): void;
    /**
     * @deprecated Use onLeaveLayer instead
     */
    onLeaveZone(name: string, callback: () => void): void;
    onEnterLayer(layerName: string): Subject<void>;
    onLeaveLayer(layerName: string): Subject<void>;
    showLayer(layerName: string): void;
    hideLayer(layerName: string): void;
    setProperty(layerName: string, propertyName: string, propertyValue: string | number | boolean | undefined): void;
    getTiledMap(): Promise<ITiledMap>;
    setTiles(tiles: TileDescriptor[]): void;
    get id(): string;
    get mapURL(): string;
    loadTileset(url: string): Promise<number>;
    get website(): WorkadventureRoomWebsiteCommands;
    get area(): WorkadventureAreaCommands;
}
declare const _default: WorkadventureRoomCommands;
export default _default;
