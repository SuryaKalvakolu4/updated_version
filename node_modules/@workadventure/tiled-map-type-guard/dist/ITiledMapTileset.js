"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTiledMapTileset = void 0;
const tg = __importStar(require("generic-type-guard"));
const ITiledMapProperty_1 = require("./ITiledMapProperty");
const ITiledMapTerrain_1 = require("./ITiledMapTerrain");
const ITiledMapGrid_1 = require("./ITiledMapGrid");
const ITiledMapOffset_1 = require("./ITiledMapOffset");
const ITiledMapTile_1 = require("./ITiledMapTile");
const ITiledMapTransformations_1 = require("./ITiledMapTransformations");
const ITiledMapWangSet_1 = require("./ITiledMapWangSet");
exports.isTiledMapTileset = new tg.IsInterface()
    .withProperties({
    name: tg.isString,
    image: tg.isString,
})
    .withOptionalProperties({
    backgroundcolor: tg.isString,
    columns: tg.isNumber,
    firstgid: tg.isNumber,
    grid: ITiledMapGrid_1.isTiledMapGrid,
    id: tg.isNumber,
    imageheight: tg.isNumber,
    imagewidth: tg.isNumber,
    margin: tg.isNumber,
    objectalignment: tg.isString,
    properties: tg.isArray(ITiledMapProperty_1.isTiledMapProperty),
    source: tg.isString,
    spacing: tg.isNumber,
    terrains: tg.isArray(ITiledMapTerrain_1.isTiledMapTerrain),
    tilecount: tg.isNumber,
    tiledversion: tg.isString,
    tileheight: tg.isNumber,
    tileoffset: ITiledMapOffset_1.isTiledMapOffset,
    tiles: tg.isArray(ITiledMapTile_1.isTiledMapTile),
    tilewidth: tg.isNumber,
    transformations: ITiledMapTransformations_1.isTiledMapTransformations,
    transparentcolor: tg.isString,
    type: tg.isSingletonString('tileset'),
    version: tg.isUnion(tg.isString, tg.isNumber),
    wangsets: tg.isArray(ITiledMapWangSet_1.isTiledMapWangSet),
})
    .get();
//# sourceMappingURL=ITiledMapTileset.js.map