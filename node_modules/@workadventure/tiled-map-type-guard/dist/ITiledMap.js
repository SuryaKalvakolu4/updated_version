"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTiledMap = void 0;
const tg = __importStar(require("generic-type-guard"));
const ITiledMapProperty_1 = require("./ITiledMapProperty");
const ITiledMapLayer_1 = require("./ITiledMapLayer");
const ITiledMapTileset_1 = require("./ITiledMapTileset");
exports.isTiledMap = new tg.IsInterface()
    .withProperties({
    layers: tg.isArray(ITiledMapLayer_1.isTiledMapLayer),
    tiledversion: tg.isString,
    tilesets: tg.isArray(ITiledMapTileset_1.isTiledMapTileset),
})
    .withOptionalProperties({
    backgroundcolor: tg.isString,
    compressionlevel: tg.isNumber,
    height: tg.isNumber,
    hexsidelength: tg.isNumber,
    infinite: tg.isBoolean,
    nextlayerid: tg.isNumber,
    nextobjectid: tg.isNumber,
    orientation: tg.isSingletonStringUnion('orthogonal', 'isometric', 'staggered', 'hexagonal'),
    properties: tg.isArray(ITiledMapProperty_1.isTiledMapProperty),
    renderorder: tg.isSingletonStringUnion('right-down', 'right-up', 'left-down', 'left-up'),
    staggeraxis: tg.isSingletonStringUnion('x', 'y'),
    staggerindex: tg.isSingletonStringUnion('odd', 'even'),
    tileheight: tg.isNumber,
    tilewidth: tg.isNumber,
    type: tg.isSingletonString('map'),
    version: tg.isUnion(tg.isString, tg.isNumber),
    width: tg.isNumber,
})
    .get();
//# sourceMappingURL=ITiledMap.js.map