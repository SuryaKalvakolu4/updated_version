import * as tg from 'generic-type-guard';
export declare const isTiledMap: tg.TypeGuard<object & {
    layers: ((object & {
        data: any;
        height: any;
        id: any;
        name: any;
        opacity: any;
        type: any;
        visible: any;
        width: any;
    } & Partial<{
        chunks: any;
        compression: any;
        encoding: any;
        offsetx: any;
        offsety: any;
        parallaxx: any;
        parallaxy: any;
        properties: any;
        startx: any;
        starty: any;
        tintcolor: any;
        x: any;
        y: any;
    }>) | (object & {
        opacity: number;
        name: string;
        visible: boolean;
        type: "group";
        layers: ((object & {
            data: any;
            height: any;
            id: any;
            name: any;
            opacity: any;
            type: any;
            visible: any;
            width: any;
        } & Partial<{
            chunks: any;
            compression: any;
            encoding: any;
            offsetx: any;
            offsety: any;
            parallaxx: any;
            parallaxy: any;
            properties: any;
            startx: any;
            starty: any;
            tintcolor: any;
            x: any;
            y: any;
        }>) | (object & any & Partial<{
            height: number;
            draworder: string;
            id: number;
            offsetx: number;
            offsety: number;
            parallaxx: number;
            parallaxy: number;
            properties: (object & {
                name: any;
                type: any;
                value: any;
            })[];
            startx: number;
            starty: number;
            tintcolor: string;
            width: number;
            x: number;
            y: number;
        }>) | (object & {
            name: any;
            objects: any;
            opacity: any;
            type: any;
            visible: any;
        } & Partial<{
            draworder: any;
            height: any;
            id: any;
            offsetx: any;
            offsety: any;
            parallaxx: any;
            parallaxy: any;
            properties: any;
            startx: any;
            starty: any;
            tintcolor: any;
            width: any;
            x: any;
            y: any;
        }>) | (object & {
            image: any;
            name: any;
            opacity: any;
            type: any;
            visible: any;
        } & Partial<{
            height: any;
            id: any;
            offsetx: any;
            offsety: any;
            parallaxx: any;
            parallaxy: any;
            properties: any;
            startx: any;
            starty: any;
            tintcolor: any;
            width: any;
            x: any;
            y: any;
        }>))[];
    } & Partial<{
        height: number;
        draworder: string;
        id: number;
        offsetx: number;
        offsety: number;
        parallaxx: number;
        parallaxy: number;
        properties: (object & {
            name: any;
            type: any;
            value: any;
        })[];
        startx: number;
        starty: number;
        tintcolor: string;
        width: number;
        x: number;
        y: number;
    }>) | (object & {
        name: any;
        objects: any;
        opacity: any;
        type: any;
        visible: any;
    } & Partial<{
        draworder: any;
        height: any;
        id: any;
        offsetx: any;
        offsety: any;
        parallaxx: any;
        parallaxy: any;
        properties: any;
        startx: any;
        starty: any;
        tintcolor: any;
        width: any;
        x: any;
        y: any;
    }>) | (object & {
        image: any;
        name: any;
        opacity: any;
        type: any;
        visible: any;
    } & Partial<{
        height: any;
        id: any;
        offsetx: any;
        offsety: any;
        parallaxx: any;
        parallaxy: any;
        properties: any;
        startx: any;
        starty: any;
        tintcolor: any;
        width: any;
        x: any;
        y: any;
    }>))[];
    tiledversion: string;
    tilesets: (object & {
        name: any;
        image: any;
    } & Partial<{
        backgroundcolor: any;
        columns: any;
        firstgid: any;
        grid: any;
        id: any;
        imageheight: any;
        imagewidth: any;
        margin: any;
        objectalignment: any;
        properties: any;
        source: any;
        spacing: any;
        terrains: any;
        tilecount: any;
        tiledversion: any;
        tileheight: any;
        tileoffset: any;
        tiles: any;
        tilewidth: any;
        transformations: any;
        transparentcolor: any;
        type: any;
        version: any;
        wangsets: any;
    }>)[];
} & Partial<{
    backgroundcolor: string;
    compressionlevel: number;
    height: number;
    hexsidelength: number;
    infinite: boolean;
    nextlayerid: number;
    nextobjectid: number;
    orientation: "orthogonal" | "isometric" | "staggered" | "hexagonal";
    properties: (object & {
        name: any;
        type: any;
        value: any;
    })[];
    renderorder: "right-down" | "right-up" | "left-down" | "left-up";
    staggeraxis: "x" | "y";
    staggerindex: "odd" | "even";
    tileheight: number;
    tilewidth: number;
    type: "map";
    version: string | number;
    width: number;
}>>;
export declare type ITiledMap = tg.GuardedType<typeof isTiledMap>;
