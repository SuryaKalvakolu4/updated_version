"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.combine = exports.assert = exports.AssertionError = void 0;
/**
 * Indicates there was an error validating a typeguard.
 *
 * @public
 */
var AssertionError = /** @class */ (function (_super) {
    __extends(AssertionError, _super);
    function AssertionError(value, message) {
        var _this = _super.call(this, message) || this;
        _this.value = value;
        _this.name = _this.constructor.name;
        return _this;
    }
    return AssertionError;
}(RangeError));
exports.AssertionError = AssertionError;
/**
 * Asserts that a guard is successful.
 *
 * This may not work properly in ECMAScript environments that don't fully support ES6. If this is your environment then
 * you should do this check manually and throw your own error.
 *
 * @throws AssertionError if the guard returns false.
 * @public
 */
var assert = function (value, guard, message) {
    if (!guard(value)) {
        throw new AssertionError(value, message !== null && message !== void 0 ? message : "Invalid value provided: ".concat(JSON.stringify(value)));
    }
};
exports.assert = assert;
/**
 * Helper to string many different typeguards together into something larger.
 *
 * @param guards - A list of partial typeguards to string together.
 *
 * @public
 */
var combine = function () {
    var guards = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        guards[_i] = arguments[_i];
    }
    return function (v) {
        var e_1, _a;
        try {
            for (var guards_1 = __values(guards), guards_1_1 = guards_1.next(); !guards_1_1.done; guards_1_1 = guards_1.next()) {
                var guard = guards_1_1.value;
                if (!guard(v)) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (guards_1_1 && !guards_1_1.done && (_a = guards_1["return"])) _a.call(guards_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    };
};
exports.combine = combine;
//# sourceMappingURL=utils.js.map