"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.IsInterface = void 0;
var o = __importStar(require("../objects"));
var functions_1 = require("./functions");
var primitives_1 = require("../primitives");
/**
 * Internal class used to represent each step in the building process.
 */
var InterfaceStep = /** @class */ (function () {
    function InterfaceStep(ptt) {
        this.ptt = ptt;
    }
    InterfaceStep.prototype.get = function () {
        var _this = this;
        return function (obj) { return (0, primitives_1.isObjectLike)(obj) && _this.ptt(obj); };
    };
    InterfaceStep.prototype["with"] = function (ptv) {
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, ptv));
    };
    InterfaceStep.prototype.withProperty = function (key, ptv) {
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, o.hasProperty(key, ptv)));
    };
    InterfaceStep.prototype.withOptionalProperty = function (key, ptv) {
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, o.hasOptionalProperty(key, ptv)));
    };
    InterfaceStep.prototype.withStringIndexSignature = function (value, enforce) {
        if (enforce === void 0) { enforce = true; }
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, o.hasStringIndexSignature(value, enforce)));
    };
    InterfaceStep.prototype.withNumericIndexSignature = function (value, enforce) {
        if (enforce === void 0) { enforce = true; }
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, o.hasNumericIndexSignature(value, enforce)));
    };
    InterfaceStep.prototype.withProperties = function (props) {
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, o.hasProperties(props)));
    };
    InterfaceStep.prototype.withOptionalProperties = function (props) {
        return new InterfaceStep((0, functions_1.isIntersection)(this.ptt, o.hasOptionalProperties(props)));
    };
    return InterfaceStep;
}());
/**
 * A small class to help with constructing interface guards.
 *
 * @public
 */
var IsInterface = /** @class */ (function () {
    function IsInterface() {
    }
    IsInterface.prototype.get = function () {
        return primitives_1.isObjectLike;
    };
    IsInterface.prototype["with"] = function (ptv) {
        return new InterfaceStep(ptv);
    };
    IsInterface.prototype.withProperty = function (key, ptv) {
        return new InterfaceStep(o.hasProperty(key, ptv));
    };
    IsInterface.prototype.withOptionalProperty = function (key, ptv) {
        return new InterfaceStep(o.hasOptionalProperty(key, ptv));
    };
    IsInterface.prototype.withStringIndexSignature = function (value, enforce) {
        if (enforce === void 0) { enforce = true; }
        return new InterfaceStep(o.hasStringIndexSignature(value, enforce));
    };
    IsInterface.prototype.withNumericIndexSignature = function (value, enforce) {
        if (enforce === void 0) { enforce = true; }
        return new InterfaceStep(o.hasNumericIndexSignature(value, enforce));
    };
    IsInterface.prototype.withProperties = function (props) {
        return new InterfaceStep(o.hasProperties(props));
    };
    IsInterface.prototype.withOptionalProperties = function (props) {
        return new InterfaceStep(o.hasOptionalProperties(props));
    };
    return IsInterface;
}());
exports.IsInterface = IsInterface;
//# sourceMappingURL=interface.js.map