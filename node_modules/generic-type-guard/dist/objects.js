"use strict";
exports.__esModule = true;
exports.isExactObject = exports.isLikeObject = exports.hasOptionalProperties = exports.hasOnlyProperties = exports.hasProperties = exports.isInstance = exports.hasNumericIndexSignature = exports.hasStringIndexSignature = exports.isRecord = exports.hasOptionalProperty = exports.hasProperty = void 0;
var utils_1 = require("./utils");
var primitives_1 = require("./primitives");
/**
 * Validates that a given object has a property of a given type.
 *
 * @public
 */
var hasProperty = function (property, value) {
    return function (o) {
        // If the property exists and conforms to the value type guard.
        return value(o[property]);
    };
};
exports.hasProperty = hasProperty;
/**
 * Validates that a given object has an optional property of a given type.
 *
 * @public
 */
var hasOptionalProperty = function (property, value) {
    return function (o) {
        return !(property in o) ||
            // If the property exists and conforms to the value type guard.
            value(o[property]);
    };
};
exports.hasOptionalProperty = hasOptionalProperty;
/**
 * Validate that a variable is an object with a single field.
 *
 * If you need multiple fields then use hasProperties.
 *
 * @public
 */
var isRecord = function (property, value) {
    return function (o) {
        return (0, primitives_1.isObject)(o) && (0, exports.hasProperty)(property, value)(o);
    };
};
exports.isRecord = isRecord;
/**
 * Validates that a given object has a string index signature.
 *
 * @param enforce - Whether to enforce that there is at least one property already set. Be careful setting this to
 *   false, you will get some unexpected outputs, for instance arrays will have a string index signature.
 *
 * @public
 */
var hasStringIndexSignature = function (value, enforce) {
    if (enforce === void 0) { enforce = true; }
    return function (o) {
        var n = 0;
        for (var prop in o) {
            if (isNaN(parseInt(prop, 10))) {
                if (value(o[prop])) {
                    n++;
                }
                else {
                    return false;
                }
            }
        }
        return !enforce || n > 0;
    };
};
exports.hasStringIndexSignature = hasStringIndexSignature;
/**
 * Validates that a given object has a numeric index signature.
 *
 * @param enforce - Whether to enforce that there is at least one property already set. Be careful setting this to
 *   false, you will get some unexpected outputs, for instance objects will have a numeric index signature.
 *
 * @public
 */
var hasNumericIndexSignature = function (value, enforce) {
    if (enforce === void 0) { enforce = true; }
    return function (o) {
        var n = 0;
        for (var prop in o) {
            if (!isNaN(parseInt(prop, 10))) {
                // We still index as a string here because prop is a string.
                if (value(o[prop])) {
                    n++;
                }
                else {
                    return false;
                }
            }
        }
        return !enforce || n > 0;
    };
};
exports.hasNumericIndexSignature = hasNumericIndexSignature;
/**
 * Validates that a given object is an instance of a class.
 *
 * @public
 */
var isInstance = function (klass) {
    return function (o) {
        return o instanceof klass;
    };
};
exports.isInstance = isInstance;
/**
 * Validate that a given object has all the given properties
 *
 * @param props - a MappedGuard of the object to be validated, i.e. an object that has the same properties as the
 *    object being validated whose types are TypeGuards for the matching type on the original property.
 *
 * @public
 */
var hasProperties = function (props) {
    return function (o) {
        for (var prop in props) {
            if (!(0, exports.hasProperty)(prop, props[prop])(o)) {
                return false;
            }
        }
        return true;
    };
};
exports.hasProperties = hasProperties;
/**
 * Validate that a given object only has the given properties
 *
 * @param props - A MappedTypeGuard of the object to be validated.
 *
 * @public
 */
var hasOnlyProperties = function (props) {
    return function (o) {
        var found = [];
        for (var prop in o) {
            if (prop in props) {
                var propsKey = prop;
                if (!(0, exports.hasProperty)(propsKey, props[propsKey])(o)) {
                    return false;
                }
                found.push(propsKey);
            }
            else {
                return false;
            }
        }
        return found.length === Object.keys(props).length;
    };
};
exports.hasOnlyProperties = hasOnlyProperties;
/**
 * Validate that a given object has all the given optional properties
 *
 * @param props - a MappedGuard of the object to be validated, i.e. an object that has the same properties as the
 *    object being validated whose types are TypeGuards for the matching type on the original property.
 *
 * @public
 */
var hasOptionalProperties = function (props) {
    return function (o) {
        for (var prop in props) {
            if (!(0, exports.hasOptionalProperty)(prop, props[prop])(o)) {
                return false;
            }
        }
        return true;
    };
};
exports.hasOptionalProperties = hasOptionalProperties;
/**
 * Validate that an object has the fields provided.
 *
 * @public
 */
var isLikeObject = function (props) {
    return (0, utils_1.combine)(primitives_1.isObject, (0, exports.hasProperties)(props));
};
exports.isLikeObject = isLikeObject;
/**
 * Validate that an object has exactly the fields provided.
 *
 * @public
 */
var isExactObject = function (props) {
    return (0, utils_1.combine)(primitives_1.isObject, (0, exports.hasOnlyProperties)(props));
};
exports.isExactObject = isExactObject;
//# sourceMappingURL=objects.js.map